<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AmazonSES_Description" xml:space="preserve">
    <value>Use the integrated Amazon Simple Email Service (SES) to send emails.</value>
  </data>
  <data name="AmazonSES_FromEmailLabel" xml:space="preserve">
    <value>From Name</value>
  </data>
  <data name="AmazonSES_FromNameLabel" xml:space="preserve">
    <value>From Email</value>
  </data>
  <data name="AmazonSES_Name" xml:space="preserve">
    <value>Amazon SES (Integrated)</value>
  </data>
  <data name="Email_FromEmailDescription" xml:space="preserve">
    <value>The sender email address.</value>
  </data>
  <data name="Email_FromEmailLabel" xml:space="preserve">
    <value>From Email</value>
  </data>
  <data name="Email_FromNameDescription" xml:space="preserve">
    <value>The name of the sender.</value>
  </data>
  <data name="Email_FromNameLabel" xml:space="preserve">
    <value>From Name</value>
  </data>
  <data name="Firebase_CredentialsHints" xml:space="preserve">
    <value>The credentials as JSON document.</value>
  </data>
  <data name="Firebase_CredentialsLabel" xml:space="preserve">
    <value>Credentials</value>
  </data>
  <data name="Firebase_Description" xml:space="preserve">
    <value>Send Push notifications to iOS and Android devices using MessageBird.</value>
  </data>
  <data name="Firebase_Name" xml:space="preserve">
    <value>Firebase</value>
  </data>
  <data name="Firebase_ProjectIdLabel" xml:space="preserve">
    <value>Project ID</value>
  </data>
  <data name="Firebase_SilentAndroidDescription" xml:space="preserve">
    <value>Send silent notifications to Android</value>
  </data>
  <data name="Firebase_SilentAndroidLabel" xml:space="preserve">
    <value>Silent (Android)</value>
  </data>
  <data name="Firebase_SilentIOSDescription" xml:space="preserve">
    <value>Send silent notifications to iOS</value>
  </data>
  <data name="Firebase_SilentIOSLabel" xml:space="preserve">
    <value>Silent (iOS)</value>
  </data>
  <data name="Mailchimp_ApiKeyLabel" xml:space="preserve">
    <value>API Key</value>
  </data>
  <data name="Mailchimp_Description" xml:space="preserve">
    <value>Send emails over Mailchimp.</value>
  </data>
  <data name="Mailchimp_Error" xml:space="preserve">
    <value>Failed to send email to '{0}: {1}.</value>
  </data>
  <data name="Mailchimp_ErrorUnknown" xml:space="preserve">
    <value>Failed to send email to '{0}': No result provided.</value>
  </data>
  <data name="Mailchimp_Name" xml:space="preserve">
    <value>Mailchimp</value>
  </data>
  <data name="Mailjet_ApiKeyLabel" xml:space="preserve">
    <value>API Key</value>
  </data>
  <data name="Mailjet_ApiSecretLabel" xml:space="preserve">
    <value>API Secret</value>
  </data>
  <data name="Mailjet_Description" xml:space="preserve">
    <value>Send emails over Mailjet.</value>
  </data>
  <data name="Mailjet_Error" xml:space="preserve">
    <value>Failed to send email to '{0}: {1}/{2}.</value>
  </data>
  <data name="Mailjet_ErrorUnknown" xml:space="preserve">
    <value>Failed to send email to '{0}': No result provided.</value>
  </data>
  <data name="Mailjet_Name" xml:space="preserve">
    <value>Mailjet</value>
  </data>
  <data name="MessageBirdIntegrated_Description" xml:space="preserve">
    <value>Integrated Messagebird integration for SMS messages.</value>
  </data>
  <data name="MessageBirdIntegrated_Name" xml:space="preserve">
    <value>MessageBird (Integrated)</value>
  </data>
  <data name="MessageBird_AccessKeyLabel" xml:space="preserve">
    <value>Access Key</value>
  </data>
  <data name="MessageBird_Description" xml:space="preserve">
    <value>Messagebird integration using custom Access Key.</value>
  </data>
  <data name="MessageBird_Error" xml:space="preserve">
    <value>Failed to send sms to '{0}': {1}</value>
  </data>
  <data name="MessageBird_ErrorUnknown" xml:space="preserve">
    <value>Failed to send sms to '{0}'.</value>
  </data>
  <data name="MessageBird_Name" xml:space="preserve">
    <value>Messagebird</value>
  </data>
  <data name="MessageBird_PhoneNumberLabel" xml:space="preserve">
    <value>Phone Number</value>
  </data>
  <data name="SMTP_Description" xml:space="preserve">
    <value>Send emails using a custom email server.</value>
  </data>
  <data name="SMTP_HostLabel" xml:space="preserve">
    <value>Host</value>
  </data>
  <data name="SMTP_Name" xml:space="preserve">
    <value>Custom SMTP Server</value>
  </data>
  <data name="SMTP_PasswordHints" xml:space="preserve">
    <value>Password for your SMTP server.</value>
  </data>
  <data name="SMTP_PasswordLabel" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="SMTP_PortLabel" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="SMTP_UsernameHints" xml:space="preserve">
    <value>Username for your SMTP server.</value>
  </data>
  <data name="SMTP_UsernameLabel" xml:space="preserve">
    <value>Username</value>
  </data>
  <data name="ThreemaSimple_ApiIdentityLabel" xml:space="preserve">
    <value>API Identity</value>
  </data>
  <data name="ThreemaSimple_ApiSecretLabel" xml:space="preserve">
    <value>API authentication secret</value>
  </data>
  <data name="ThreemaSimple_Description" xml:space="preserve">
    <value>Send server-side encrypted messages using Threema.</value>
  </data>
  <data name="ThreemaSimple_Name" xml:space="preserve">
    <value>Threema</value>
  </data>
</root>