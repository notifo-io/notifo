@page
@inject IHtmlLocalizer<AppResources> T
@model SetupModel

@{
    ViewBag.Title = T["SetupTitle"];

void RenderValidation(string field)
{
    @if (ViewContext.ViewData.ModelState[field]?.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid)
    {
        <div class="errors-container">
                <span class="errors">@Html.ValidationMessage(field)</span>
            </div>
    }
}

void RenderRuleAsSuccess(string message, params object[] args)
{
    <div class="row mt-4">
            <div class="col-auto">
                <div class="status-icon status-icon-success mt-2">
                    <i class="icon-check"></i>
                </div>
            </div>

            <div class="col">
                <div>
                    @Html.Raw(T.GetString(message, args))
                </div>
            </div>
        </div>
}

void RenderRuleAsCritical(string message, params object[] args)
{
    <div class="row mt-4">
            <div class="col-auto">
                <div class="status-icon status-icon-failed mt-2">
                    <i class="icon-exclamation"></i>
                </div>
            </div>

            <div class="col">
                <div>
                    <strong>@T["CommonCritical"]</strong>: @Html.Raw(T.GetString(message, args))
                </div>
            </div>
        </div>
}

void RenderRuleAsWarning(string message, params object[] args)
{
    <div class="row mt-4">
            <div class="col-auto">
                <div class="status-icon status-icon-warning mt-2">
                    <i class="icon-exclamation"></i>
                </div>
            </div>

            <div class="col">
                <div>
                    <strong>@T["CommonWarning"]</strong>: @Html.Raw(T.GetString(message, args))
                </div>
            </div>
        </div>
}
}

<h1 style="font-size: 2rem">@T["SetupHeadline"]</h1>

<div class="form-text text-muted mt-2 mb-4">@T["SetupHint"]</div>

<div class="profile-section">
    <h2>@T["SetupRulesHeadline"]</h2>

    @if (Model!.IsValidHttps)
{
    RenderRuleAsSuccess("SetupRuleHttpsSuccess");
}
else
{
    RenderRuleAsCritical("SetupRuleHttpsFailure");
}

    @if (Model!.BaseUrlConfigured == Model!.BaseUrlCurrent)
{
    RenderRuleAsSuccess("SetupRuleUrlSuccess");
}
else
{
    RenderRuleAsCritical("SetupRuleUrlFailure", Model!.BaseUrlCurrent, Model!.BaseUrlConfigured);
}

    @if (Model!.IsAssetStoreFtp)
{
    RenderRuleAsWarning("SetupRuleFtpWarning");
}

    @if (Model!.IsAssetStoreFile)
{
    RenderRuleAsWarning("SetupRuleFolderWarning");
}
</div>

<hr />

<div class="profile-section">
    <h2>@T["SetupCreateUserHeadline"]</h2>

    @if (Model!.HasExternalLogin)
{
    <div>
            <div class="form-text text-muted mt-2 mb-2">@T["SetupCreateUserLoginHint"]</div>

            <div class="mt-3">
                <a class="btn btn-primary" asp-page="Login">
                    @T["SetupCreateUserLoginLink"]
                </a>
            </div>
        </div>
}

    @if (Model!.HasExternalLogin && Model!.HasPasswordAuth)
{
    <div class="login-separator">
            <span>@T["ExternalSeperator"]</span>
        </div>
}

    @if (Model!.HasPasswordAuth)
{
    <h3>@T["SetupCreateUserHeadlineCreate"]</h3>

    @if (!string.IsNullOrWhiteSpace(Model!.ErrorMessage))
    {
        <div class="alert alert-danger">
                @Model!.ErrorMessage
            </div>
    }

    <form class="profile-form" method="post">
            <div class="form-group">
                <label for="email">@T["EmailLabel"]</label>

                @{ RenderValidation("Email"); }

                <input type="text" class="form-control" name="email" id="email" />
            </div>

            <div class="form-group">
                <label for="password">@T["PasswordLabel"]</label>

                @{ RenderValidation("Password"); }

                <input type="password" class="form-control" name="password" id="password" />
            </div>

            <div class="form-group">
                <label for="passwordConfirm">@T["SetupCreateUserConfirmPassword"]</label>

                @{ RenderValidation("PasswordConfirm"); }

                <input type="password" class="form-control" name="passwordConfirm" id="passwordConfirm" />
            </div>

            <div class="form-group mb-0">
                <button type="submit" class="btn btn-success">@T["SetupCreateUserButton"]</button>
            </div>
        </form>
}

    @if (!Model!.HasExternalLogin && !Model!.HasPasswordAuth)
{
    <div>
            @T["SetupCreateUserFailure"]
        </div>
}
</div>